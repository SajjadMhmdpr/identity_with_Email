@model identity_with_Email.ViewModels.UserVM

@{
    ViewData["Title"] = "Edit user";
    var userRole = ViewBag.userRole as List<string>;
    //var roles = ViewBag.roles as List<string>;
}

<h1>Edit user</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" asp-controller="User">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="UserName" class="control-label"></label>
                <input asp-for="UserName" class="form-control" />
                <span asp-validation-for="UserName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
            <div class="form-group">
                @foreach (var i in ViewBag.roles)
                {
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @(userRole.Contains(i) ? "checked" : "") name="selectedRoles" value="@i" />
                        <label class="form-check-label">@i</label>
                    </div>
                }
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
